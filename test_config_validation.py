#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from core.config_manager import ConfigManager
import tempfile
import json
from pathlib import Path

def test_config_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("=== –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigManager
            config_manager = ConfigManager(temp_dir)
            print("‚úì ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = config_manager.config
            print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(config)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            testnet_mode = config_manager.get('trading.testnet', True)
            print(f"‚úì Testnet —Ä–µ–∂–∏–º: {testnet_mode}")
            
            # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            config_manager.set('test.value', 'test_data')
            retrieved_value = config_manager.get('test.value')
            assert retrieved_value == 'test_data'
            print("‚úì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_errors = config_manager.validate_configuration()
            print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(validation_errors)} –æ—à–∏–±–æ–∫")
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            config_manager.save()
            config_file = Path(temp_dir) / "config.json"
            assert config_file.exists()
            print("‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_manager2 = ConfigManager(temp_dir)
            test_value = config_manager2.get('test.value')
            assert test_value == 'test_data'
            print("‚úì –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print("\n=== –í–°–ï –¢–ï–°–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´ ===")
            return True
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

def test_risk_management_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    print("\n=== –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê ===")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            config_manager = ConfigManager(temp_dir)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            risk_limits = config_manager.get_risk_limits()
            print(f"‚úì –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã: {risk_limits}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            assert 0 < risk_limits['max_daily_balance_usage'] <= 1
            assert 0 < risk_limits['max_stop_loss_percent'] <= 1
            print("‚úì –ó–Ω–∞—á–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
            
            # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            config_manager.set('trading.max_daily_balance_usage', 0.15)
            updated_limits = config_manager.get_risk_limits()
            assert updated_limits['max_daily_balance_usage'] == 0.15
            print("‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print("\n=== –¢–ï–°–¢–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê –ü–†–û–ô–î–ï–ù–´ ===")
            return True
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    success1 = test_config_validation()
    success2 = test_risk_management_config()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        sys.exit(1)