
# Техническое задание: торговый робот для Bybit

## Назначение
Программа должна предоставлять графический интерфейс для торговли на платформе **Bybit** с использованием реальных данных через REST‑ и, при необходимости, WebSocket‑API. Проект рассчитан на Windows 11, написан на **Python**.  
**Основной язык разработки — Python**, однако допустимо использование других языков (C/C++, Rust и т. д.) для отдельных модулей, когда это необходимо для повышения производительности или работы с внешними библиотеками.  
Приложение строится по модульному принципу с вкладками/окнами для различных функций. Интерфейс должен быть отзывчивым: сетевые запросы и вычисления не должны блокировать основной поток GUI.

## Общие требования

1. **Реальные данные**. Все запросы должны обращаться к рабочему (или тестовому) API Bybit. В приложении недопустимы фиктивные или демо‑данные. Для тестирования используйте *testnet* (`https://api-testnet.bybit.com`) с отдельным API‑ключом.
2. **Асинхронность и производительность**. Сетевые вызовы и длительные вычисления выносятся в отдельные потоки/корутины. GUI (PyQt5 или PySide6) работает в главном потоке, обмен данными осуществляется через сигналы/события. При использовании синхронного SDK (`pybit`) обёртывайте его вызовы в `QThread` или `concurrent.futures.ThreadPoolExecutor`.
3. **Модульность**. Каждый функциональный раздел реализуется как отдельный модуль/файл. Основной файл («фрейм») собирает и соединяет эти модули, создавая вкладки (табы).
4. **Расширяемость**. Структура проекта должна позволять добавлять новые вкладки или стратегии без изменения основной логики.
5. **Лицензия**. Код распространяется под лицензией MIT (см. файл `LICENSE.txt`).
6. **Документация**. В репозитории должна быть инструкция по установке, настройке API‑ключей и запуску приложения (README.md). Комментарии в коде — на английском или русском.

7. **Поддержка двух сред (mainnet и testnet)**. Интерфейс должен позволять пользователю выбирать между основной сетью Bybit и тестовой средой. Для каждой сети используется собственная пара API‑ключей и собственные базовые URL и WebSocket‑адреса. В настройках (например, на вкладке «Основная информация») пользователь должен иметь возможность вводить ключи для обеих сред и переключать активную среду одним‑двумя кликами.

## Песочница и тестирование
Платформа Bybit предоставляет тестовую среду **testnet**. В разделе интеграции указано, что для тестнета и основной сети используются разные базовые URL и API‑ключиhttps://bybit-exchange.github.io/docs/v5/guide#:~:text=HTTP%20Headers%20for%20Authenticated%20Endpoints. Для безопасной отладки и тестирования стратегий пользователь должен создать API‑ключ на тестнете (`https://api-testnet.bybit.com`) и указать его в настройках приложения. Дополнительных «симуляторов» в Bybit нет.

### Как использовать testnet

1. Зарегистрируйтесь на сайте **testnet.bybit.com** (это отдельный портал). Вы можете использовать тот же адрес электронной почты, что и для основной сети.
2. В разделе *API Management* создайте API‑ключ с правами `Read` и `Trade` (аналогично основной сети). Запишите `API Key` и `Secret`.
3. В конфигурации программы укажите базовый URL тестовой среды — `https://api-testnet.bybit.com` для REST и адреса WebSocket: для публичных данных спот — `wss://stream-testnet.bybit.com/v5/public/spot`, для линейных деривативов — `wss://stream-testnet.bybit.com/v5/public/linear`, приватный поток — `wss://stream-testnet.bybit.com/v5/private`https://bybit-exchange.github.io/docs/v5/ws/connect#:~:text=,wss%3A%2F%2Fstream.bybit.com%2Fv5%2Fpublic%2Foption.
4. В интерфейсе программы выберите **testnet** в качестве активной среды. Приложение должно отправлять запросы на тестовый сервер и использовать тестовые ключи. Переключение на **mainnet** должно менять базовые URL и ключи на боевые.

Такая механика позволит разработчику и пользователю безопасно тестировать стратегии и функционал без риска потерять реальные средства. Все функции (создание ордеров, получение баланса, подписка на WebSocket‑потоки) должны корректно работать в обеих средах.

## Получение API‑ключей
Для работы с API необходимо создать API‑ключ:

1. Зайти на сайт Bybit (тестнет или основная сеть) и открыть раздел *API Management*.
2. Нажать **Create New Key**, выбрать тип ключа (HMAC или RSA), установить права `Read` и `Trade`. Вводить `Withdraw` рекомендуется только при необходимости вывода средств.
3. Записать `API Key` и `Secret` (или сгенерировать RSA‑пару как описано в документации) и внести их в конфигурационный файл программы. Для новых аккаунтов Bybit может блокировать создание ключей в течение 48 часовhttps://www.bybitglobal.com/en/help-center/article/How-to-create-your-API-key#:~:text=%E2%80%94%20The%20creation%20of%20an,it%20via%20the%20Bybit%20App.

Программа должна проверять наличие ключа при старте и запрашивать пользователя, если ключ не указан. Ключи хранятся локально (например, в файле `config.ini`) и не отправляются на серверы разработчика.
> **Важно для заказчика:** вам необходимо самостоятельно создать две пары ключей (для **mainnet** и **testnet**) и передать их разработчику. Кроме того, для работы вкладки Telegram уведомлений нужно создать бота через [@BotFather](https://t.me/BotFather), получить токен и сообщить разработчику Chat ID вашего чата/канала. Все ключи и токены хранятся локально и не публикуются в репозитории.

## Структура интерфейса (главное окно)

Приложение имеет главное окно с вкладками. Каждая вкладка реализована отдельным модулем (Python‑файлом).

1. **Вкладка «Основная информация»**
   - Отображает текущий выбранный счёт и его режим (classic, Unified 1.0, UTA 2.0), полученный из метода `GET /v5/account/info`https://bybit-exchange.github.io/docs/v5/account/account-info#:~:text=Get%20Account%20Info.
   - Баланс счёта (equity, available balance) и свободная маржа.
   - Запущенная стратегия (если активирована).
   - Текущее серверное время (можно брать через эндпоинт `GET /v5/market/time` или локальную синхронизацию).
   - Количество открытых позиций, ордеров и активных предложений пользователя.
   - Изменение капитала за последний час, день и неделю (рассчитывается из исторических данных счёта).
   - Возможность переключения между суб‑счётами (если они созданы) и режимами маржи (кросс/изолированная/портфельная) через вызовы `POST /v5/account/set-margin-mode`https://bybit-exchange.github.io/docs/v5/account/set-margin-mode#:~:text=Set%20Margin%20Mode.

2. **Вкладка «Активы/рынки»**
   - Список всех доступных инструментов, полученный по API: криптовалюты (Spot), деривативы (перпетуалы, опционы), если поддерживается Bybit. Разделить инструменты на категории (например, *Спот*, *USDT Perpetual*, *USDC Perpetual*, *Опционы*). Каждая категория — субвкладка или отдельный компонент внутри вкладки.
   - По каждому активу показывать текущие котировки (bid/ask, последняя цена, 24h high/low) и минимальную торговую сумму. При клике на актив отображать график цен (исторические данные берутся через эндпоинт свечей `GET /v5/market/candles`). Использовать библиотеку `matplotlib` или встроенный виджет Qt Charts.
   - Возможность быстро открыть ордер (market/limit) по выбранному активу с указанием типа (buy/sell), объёма и цены.

3. **Вкладка «Дополнительные функции платформы»**
   - Содержит подразделы, соответствующие прочим возможностям Bybit, таким как:
     * Управление суб‑счётами (создание/просмотр суб‑UID) через эндпоинт `POST /v5/account/sub-uid`https://bybit-exchange.github.io/docs/v5/user/create-subuid#:~:text=The%20API%20key%20must%20have,order%20to%20call%20this%20endpoint.
     * Настройки маржи (изолированная, кросс, портфельная).
     * Просмотр страхового фонда через эндпоинт страхового пула (упомянут в документации как «Insurance Fund Interface»https://github.com/vlastelin8611/bytrade/blob/main/info/info%20text.txt#L47-L50).
     * Другие API‑функции, которые вы считаете нужными (например, перевод средств между аккаунтами).
   - Логика каждой функции должна располагаться в отдельном модуле, но интерфейс объединяется вкладками.

4. **Вкладка «Стратегии»**
   - Перечень встроенных торговых стратегий (например, скользящие средние, RSI‑crossover, маркет‑мейкинг). Каждая стратегия имеет описание на понятном языке, рекомендации по применению и параметры настройки (количество периодов, размеры лотов и т. д.).
   - Рядом с каждой стратегией — переключатель (вкл./выкл.). Одновременно активна только одна стратегия. При выборе одной стратегии остальные автоматически отключаются.
   - Возможность запускать стратегию на одном или нескольких инструментах, если это позволяет логика.
   - Стратегии должны работать в отдельном потоке/корутине, отправляя заявки через API с учётом лимитов (600 запросов за 5 секунд на IPhttps://bybit-exchange.github.io/docs/v5/rate-limit#:~:text=Rate%20Limit).

5. **Вкладка «Telegram‑уведомления»**
   - Форма для ввода токена бота и Chat ID канала/пользователя. После ввода программа должна отправлять уведомления о ключевых событиях: запуск или остановка стратегии, покупка/продажа, переключение счёта, пополнение/вывод, ошибки. Используйте библиотеку `python-telegram-bot` (асинхронный режим) или простые HTTP‑запросы.
   - Под каждым уведомлением в Telegram должны отображаться кнопки:
     1. **Статус** — отвечает текущим статусом счета (данные из вкладки «Основная информация») и активной стратегии.
     2. **Стоп** — прекращает всю торговлю и останавливает активную стратегию. Обработку этой кнопки нужно реализовать в боте и интегрировать с программой.

6. **Вкладка «Портфель»**
   - Список всех купленных активов (Spot, деривативы). Для каждого актива отображается средняя цена покупки, текущая цена, изменение в процентах и абсолютное PnL. Это рассчитывается на основе истории сделок пользователя (методы `GET /v5/position/list` и `GET /v5/account/wallet-balance`).
   - Возможность закрыть позицию или частично продать из интерфейса.

## Дополнительные требования

- **Работа с подключением**. Программа должна корректно обрабатывать ошибки сети, повторять запросы при временных сбоях, соблюдать лимиты API и показывать пользователю сообщения об ошибках.
- **Логирование**. Вести лог действий пользователя и программы (файл log или база данных). Логи пригодятся для анализа и отладки.
- **Хранение конфигурации**. Конфигурационные данные (API‑ключи, настройки стратегий, Telegram Chat ID) должны храниться в одном файле (`config.ini` или YAML) вне репозитория.
- **Юридические аспекты**. По условиям Bybit API вы получаете ограниченную, неизключительную и отзывную лицензию на использование API лишь для личного пользованияhttps://www.bybitglobal.com/en/help-center/article/API-Terms#:~:text=5.%20,License. Приложение не должно предоставлять доступ третьим лицам или встраивать нелегальные функции.

* **Адаптивность интерфейса**. Окно программы должно корректно масштабироваться при изменении размеров. Все элементы интерфейса (таблицы, графики, кнопки) должны растягиваться или переупорядочиваться так, чтобы сохранялась читаемость текста и доступность функциональности. Нужно определить минимальный размер окна, при котором интерфейс остаётся удобным (например, 1024×768). При уменьшении ниже этого значения программа выводит предупреждение или блокирует дальнейшее уменьшение.

* **Каркас приложения**. Основной модуль (например, `main.py`) выполняет роль каркаса: инициализирует приложение, создаёт главное окно, формирует вкладки и подключает отдельные модули (файлы) с реализацией каждой вкладки. При добавлении новой функциональности достаточно создать новый модуль и добавить его в каркас.

## Что нужно от заказчика

1. **API‑ключи** и **секреты** для тестнета и основной сети.
2. **Список желаемых стратегий** с описанием логики, параметров и желаемых рынков.
3. **Предпочтительный GUI‑фреймворк** (PyQt5/PySide6, Tkinter и т. д.). Рекомендуется PyQt/PySide для вкладок и высокого уровня контроля.
4. **Язык документации** (русский или английский) и формат (README.md, PDF).
5. **Перечень активов** (например, только криптовалюты или также деривативы/опционы), с которыми будет работать бот.
6. **Ограничения по рискам**: максимальный размер позиции, стоп‑лосс/тейк‑профит, допустимая просадка.
7. **Данные для Telegram‑бота**: токен, Chat ID и желаемый текст уведомлений.
8. **Приоритет функций**. Какие вкладки и функции необходимо реализовать в первую очередь, а какие можно отложить или убрать.

9. **Выбор языка**. Основной язык разработки — Python. Укажите, допускаете ли вы использование других языков программирования (например, для создания высокопроизводительных модулей) и какие именно языки предпочтительны.

## Недостающие сведения
В собранном файле `info text.txt` содержится перевод и выдержки из документации API, но отсутствуют подробные разделы:

- **WebSocket API**: примеры подписки на потоки реального времени (тикеры, ордербуки). Для этого нужно обратиться к официальному разделу «WebSocket» на сайте Bybit или в репозитории `bybit-exchange/api-usage-examples` (папка `V5_demo/ws`)
- **Управление ордерами**: подробные поля эндпоинтов `POST /v5/order/create`, `POST /v5/order/amend` и т. д., включая обязательные и необязательные параметры.
- **Функции риск‑менеджмента**: ограничение количества запросов на единицу времени (лимит 600/5 с), параметры `triggerDirection`, `closeOnTrigger` и другое.

Дополнительные инструкции можно найти в официальной документации Bybit V5: `https://bybit-exchange.github.io/docs/v5`. Там приведены примеры запросов и ответы для всех эндпоинтов. Для WebSocket рекомендуется `https://bybit-exchange.github.io/docs/v5/websocket`. Ещё один полезный репозиторий — `https://github.com/bybit-exchange/api-usage-examples`, где есть готовые демо‑скрипты.

