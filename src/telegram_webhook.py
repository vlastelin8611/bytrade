import json
import logging
from typing import Dict, Any, Optional
from datetime import datetime

class TelegramCommandProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–Ω–æ–ø–æ–∫ Telegram"""
    
    def __init__(self, db_manager=None):
        self.db_manager = db_manager
        self.logger = logging.getLogger(__name__)
    
    def process_status_command(self, chat_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Status' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            if not self.db_manager:
                return "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = self._get_account_status()
            strategies_info = self._get_strategies_status()
            
            status_message = f"üìä **–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
            status_message += account_info + "\n\n"
            status_message += f"üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**\n\n"
            status_message += strategies_info
            
            return status_message
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
    
    def process_pause_command(self, chat_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Pause' - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            return "‚è∏Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    
    def process_stop_command(self, chat_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Stop' - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            return "üõë –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    
    def process_logs_command(self, chat_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Logs' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
        try:
            logs = self._get_recent_logs()
            if not logs:
                return "üìù –õ–æ–≥–∏ –ø—É—Å—Ç—ã"
            
            logs_message = "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:**\n\n"
            for log in logs[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                logs_message += f"{log}\n"
            
            return logs_message
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤"
    
    def _get_account_status(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.db_manager:
                return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            return "üí∞ –ë–∞–ª–∞–Ω—Å: –ó–∞–≥—Ä—É–∑–∫–∞...\nüìà P&L: –ó–∞–≥—Ä—É–∑–∫–∞...\nüîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"
    
    def _get_strategies_status(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.db_manager:
                return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            return "üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: 0\n‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: 0\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: 0"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    
    def _get_recent_logs(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.db_manager:
                return []
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
            return ["–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ 1", "–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ 2"]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return []


class TelegramWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    
    def __init__(self, command_processor: TelegramCommandProcessor):
        self.command_processor = command_processor
        self.logger = logging.getLogger(__name__)
    
    def handle_callback_query(self, update_data: Dict[str, Any]) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            callback_query = update_data.get('callback_query')
            if not callback_query:
                return None
            
            callback_data = callback_query.get('data')
            chat_id = str(callback_query.get('from', {}).get('id', ''))
            
            if not callback_data or not chat_id:
                return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if callback_data == 'status':
                return self.command_processor.process_status_command(chat_id)
            elif callback_data == 'pause':
                return self.command_processor.process_pause_command(chat_id)
            elif callback_data == 'stop':
                return self.command_processor.process_stop_command(chat_id)
            elif callback_data == 'logs':
                return self.command_processor.process_logs_command(chat_id)
            else:
                return f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {callback_data}"
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"
    
    def handle_webhook_update(self, update_data: Dict[str, Any]) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries –æ—Ç –∫–Ω–æ–ø–æ–∫
            if 'callback_query' in update_data:
                return self.handle_callback_query(update_data)
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"