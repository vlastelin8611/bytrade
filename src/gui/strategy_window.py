from PySide6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QTextEdit, QLabel, QSplitter, QPushButton, QFrame
)
from PySide6.QtCore import Qt, QTimer, Signal
from PySide6.QtGui import QFont, QColor
from datetime import datetime
import logging

class StrategyWindow(QMainWindow):
    """–û—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    window_closed = Signal(str)  # strategy_name
    
    def __init__(self, strategy_name, strategy_instance=None, parent=None):
        super().__init__(parent)
        self.strategy_name = strategy_name
        self.strategy_instance = strategy_instance
        self.is_running = False
        
        self.setWindowTitle(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        self.setGeometry(100, 100, 1000, 700)
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(main_layout)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        self._create_logs_panel(splitter)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        self._create_human_panel(splitter)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (60% –ª–æ–≥–∏, 40% –æ–±—ä—è—Å–Ω–µ–Ω–∏—è)
        splitter.setSizes([600, 400])
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_panel(main_layout)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self._update_display)
        self.update_timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
    def _create_header(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.StyledPanel)
        header_frame.setMaximumHeight(60)
        
        header_layout = QHBoxLayout(header_frame)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        title_label = QLabel(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {self.strategy_name}")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.status_label.setStyleSheet("color: red; font-weight: bold;")
        
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_layout.addWidget(self.status_label)
        
        layout.addWidget(header_frame)
        
    def _create_logs_panel(self, splitter):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        logs_widget = QWidget()
        logs_layout = QVBoxLayout(logs_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤
        logs_title = QLabel("–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        logs_title.setStyleSheet("font-weight: bold; font-size: 12px; padding: 5px;")
        logs_layout.addWidget(logs_title)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        self.logs_text.setFont(QFont("Consolas", 9))
        self.logs_text.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #555;
            }
        """)
        logs_layout.addWidget(self.logs_text)
        
        splitter.addWidget(logs_widget)
        
    def _create_human_panel(self, splitter):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        human_widget = QWidget()
        human_layout = QVBoxLayout(human_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        human_title = QLabel("–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º)")
        human_title.setStyleSheet("font-weight: bold; font-size: 12px; padding: 5px;")
        human_layout.addWidget(human_title)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        self.human_text = QTextEdit()
        self.human_text.setReadOnly(True)
        self.human_text.setFont(QFont("Arial", 10))
        self.human_text.setStyleSheet("""
            QTextEdit {
                background-color: #f5f5f5;
                color: #333333;
                border: 1px solid #ccc;
                padding: 10px;
            }
        """)
        human_layout.addWidget(self.human_text)
        
        splitter.addWidget(human_widget)
        
    def _create_control_panel(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = QFrame()
        control_frame.setFrameStyle(QFrame.StyledPanel)
        control_frame.setMaximumHeight(50)
        
        control_layout = QHBoxLayout(control_frame)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
        self.start_stop_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.start_stop_btn.clicked.connect(self._toggle_strategy)
        self.start_stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_btn.clicked.connect(self._clear_logs)
        
        control_layout.addWidget(self.start_stop_btn)
        control_layout.addWidget(clear_btn)
        control_layout.addStretch()
        
        layout.addWidget(control_frame)
        
    def _toggle_strategy(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.is_running:
            self._stop_strategy()
        else:
            self._start_strategy()
            
    def _start_strategy(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        self.is_running = True
        self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞")
        self.status_label.setStyleSheet("color: green; font-weight: bold;")
        self.start_stop_btn.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.start_stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        
        self.add_human_message("üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
        self.add_log_message(f"[{datetime.now().strftime('%H:%M:%S')}] INFO: Strategy {self.strategy_name} started")
        
    def _stop_strategy(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        self.is_running = False
        self.status_label.setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.status_label.setStyleSheet("color: red; font-weight: bold;")
        self.start_stop_btn.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.start_stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        self.add_human_message("‚èπÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        self.add_log_message(f"[{datetime.now().strftime('%H:%M:%S')}] INFO: Strategy {self.strategy_name} stopped")
        
    def _clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.logs_text.clear()
        self.human_text.clear()
        
    def _update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_running and self.strategy_instance:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            pass
            
    def add_log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤"""
        self.logs_text.append(message)
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        cursor = self.logs_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.logs_text.setTextCursor(cursor)
        
    def add_human_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        formatted_message = f"[{timestamp}] {message}"
        self.human_text.append(formatted_message)
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        cursor = self.human_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.human_text.setTextCursor(cursor)
        
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_running:
            self._stop_strategy()
        self.window_closed.emit(self.strategy_name)
        event.accept()
        
    def get_strategy_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': self.strategy_name,
            'is_running': self.is_running,
            'window_open': True
        }