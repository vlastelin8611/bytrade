#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∫–ª–∞–¥–∫–∞ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å TelegramTab –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
–í–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç–∏—Ö–∏–µ —á–∞—Å—ã, –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ê–≤—Ç–æ—Ä: Bybit Trading Bot
–í–µ—Ä—Å–∏—è: 1.0
"""

import asyncio
import logging
from datetime import datetime, time
from typing import Dict, Any, Optional

from PySide6.QtCore import (
    Qt, QTimer, QThread, Signal, QTime
)
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QCheckBox,
    QTimeEdit, QPushButton, QTextEdit, QGroupBox, QGridLayout,
    QSplitter, QScrollArea, QFrame, QMessageBox, QLineEdit
)
from PySide6.QtGui import QFont, QTextCursor

from src.core.telegram_client import TelegramClient
from src.telegram_webhook import TelegramWebhookHandler, TelegramCommandProcessor

class TelegramTestWorker(QThread):
    """
    –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    
    # –°–∏–≥–Ω–∞–ª—ã
    test_completed = Signal(bool, str)  # success, message
    
    def __init__(self, telegram_client: TelegramClient, test_type: str, parent=None):
        super().__init__(parent)
        self.telegram_client = telegram_client
        self.test_type = test_type
        
    def run(self):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        """
        try:
            if self.test_type == "connection":
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    result = loop.run_until_complete(
                        self.telegram_client.test_connection()
                    )
                    
                    if result['success']:
                        self.test_completed.emit(True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        self.test_completed.emit(False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result['message']}")
                        
                finally:
                    loop.close()
                    
            elif self.test_type == "message":
                # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    result = loop.run_until_complete(
                        self.telegram_client.send_notification(
                            "test",
                            "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞",
                            add_buttons=True
                        )
                    )
                    
                    if result['success']:
                        self.test_completed.emit(True, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    else:
                        self.test_completed.emit(False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['message']}")
                        
                finally:
                    loop.close()
                    
        except Exception as e:
            self.test_completed.emit(False, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")


class TelegramTab(QWidget):
    """
    –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    
    def __init__(self, db_manager, config_manager, parent=None):
        super().__init__(parent)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = db_manager
        self.config = config_manager
        self.logger = logging.getLogger(__name__)
        
        # Telegram –∫–ª–∏–µ–Ω—Ç
        self.telegram_client: Optional[TelegramClient] = None
        
        # Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.webhook_handler: Optional[TelegramWebhookHandler] = None
        self.command_processor: Optional[TelegramCommandProcessor] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_settings = {
            'trade_notifications': True,
            'error_notifications': True,
            'status_notifications': True,
            'balance_notifications': True,
            'strategy_notifications': True,
            'quiet_hours_enabled': False,
            'quiet_start': time(22, 0),  # 22:00
            'quiet_end': time(8, 0)      # 08:00
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_history = []
        
        # –†–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
        self.test_worker: Optional[TelegramTestWorker] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_telegram_client()
        self._init_ui()
        self._load_settings()
        self._load_connection_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._setup_connections()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self._update_statistics)
        self.update_timer.start(30000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        self.logger.info("–í–∫–ª–∞–¥–∫–∞ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _init_telegram_client(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ config_manager
            telegram_config = self.config.get_telegram_config()
            
            bot_token = telegram_config.get('bot_token', '')
            chat_id = telegram_config.get('chat_id', '')
            
            if bot_token and chat_id:
                self.telegram_client = TelegramClient(bot_token, chat_id)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                self.command_processor = TelegramCommandProcessor(
                    config_manager=self.config,
                    db_manager=self.db,
                    strategy_engine=None  # TODO: –ø–µ—Ä–µ–¥–∞—Ç—å strategy_engine –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                )
                self.webhook_handler = TelegramWebhookHandler(
                    command_processor=self.command_processor
                )
                
                self.logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –∏ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                self.logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.telegram_client = None
            self.webhook_handler = None
            self.command_processor = None
    
    def _init_ui(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        splitter = QSplitter(Qt.Horizontal)
        layout.addWidget(splitter)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._create_connection_settings_group(left_layout)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._create_notification_settings_group(left_layout)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        self._create_quiet_hours_group(left_layout)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self._create_testing_group(left_layout)
        
        left_layout.addStretch()
        splitter.addWidget(left_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        # –ì—Ä—É–ø–ø–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._create_message_history_group(right_layout)
        
        # –ì—Ä—É–ø–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._create_statistics_group(right_layout)
        
        splitter.addWidget(right_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞
        splitter.setSizes([400, 600])
    
    def _create_connection_settings_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        layout = QGridLayout(group)
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        layout.addWidget(QLabel("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:"), 0, 0)
        self.bot_token_input = QLineEdit()
        self.bot_token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        self.bot_token_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.bot_token_input, 0, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω
        self.show_token_btn = QPushButton("üëÅ")
        self.show_token_btn.setMaximumWidth(30)
        self.show_token_btn.setCheckable(True)
        self.show_token_btn.clicked.connect(self._toggle_token_visibility)
        layout.addWidget(self.show_token_btn, 0, 2)
        
        # –ü–æ–ª–µ –¥–ª—è Chat ID
        layout.addWidget(QLabel("Chat ID:"), 1, 0)
        self.chat_id_input = QLineEdit()
        self.chat_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞")
        layout.addWidget(self.chat_id_input, 1, 1, 1, 2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.save_config_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_config_btn.clicked.connect(self._save_connection_config)
        buttons_layout.addWidget(self.save_config_btn)
        
        self.load_config_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
        self.load_config_btn.clicked.connect(self._load_connection_config)
        buttons_layout.addWidget(self.load_config_btn)
        
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout, 2, 0, 1, 3)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.connection_status_label.setStyleSheet("color: red; font-weight: bold;")
        layout.addWidget(self.connection_status_label, 3, 0, 1, 3)
        
        parent_layout.addWidget(group)
    
    def _create_notification_settings_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        layout = QVBoxLayout(group)
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.trade_notifications_cb = QCheckBox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö")
        self.error_notifications_cb = QCheckBox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
        self.status_notifications_cb = QCheckBox("–°—Ç–∞—Ç—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.balance_notifications_cb = QCheckBox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ")
        self.strategy_notifications_cb = QCheckBox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö")
        
        layout.addWidget(self.trade_notifications_cb)
        layout.addWidget(self.error_notifications_cb)
        layout.addWidget(self.status_notifications_cb)
        layout.addWidget(self.balance_notifications_cb)
        layout.addWidget(self.strategy_notifications_cb)
        
        parent_layout.addWidget(group)
    
    def _create_quiet_hours_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        """
        group = QGroupBox("–¢–∏—Ö–∏–µ —á–∞—Å—ã")
        layout = QVBoxLayout(group)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        self.quiet_hours_cb = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã")
        layout.addWidget(self.quiet_hours_cb)
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        time_layout = QHBoxLayout()
        
        time_layout.addWidget(QLabel("–°:"))
        self.quiet_start_time = QTimeEdit()
        self.quiet_start_time.setDisplayFormat("HH:mm")
        time_layout.addWidget(self.quiet_start_time)
        
        time_layout.addWidget(QLabel("–î–æ:"))
        self.quiet_end_time = QTimeEdit()
        self.quiet_end_time.setDisplayFormat("HH:mm")
        time_layout.addWidget(self.quiet_end_time)
        
        layout.addLayout(time_layout)
        
        parent_layout.addWidget(group)
    
    def _create_testing_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        group = QGroupBox("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        layout = QVBoxLayout(group)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_connection_btn = QPushButton("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.test_message_btn = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        layout.addWidget(self.test_connection_btn)
        layout.addWidget(self.test_message_btn)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        self.test_result_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.test_result_label.setWordWrap(True)
        layout.addWidget(self.test_result_label)
        
        parent_layout.addWidget(group)
    
    def _create_message_history_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        layout = QVBoxLayout(group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_text = QTextEdit()
        self.history_text.setReadOnly(True)
        self.history_text.setMaximumHeight(300)
        layout.addWidget(self.history_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.clear_history_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        self.refresh_history_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        
        buttons_layout.addWidget(self.clear_history_btn)
        buttons_layout.addWidget(self.refresh_history_btn)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        parent_layout.addWidget(group)
    
    def _create_statistics_group(self, parent_layout):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        layout = QGridLayout(group)
        
        # –ú–µ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_messages_label = QLabel("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 0")
        self.successful_messages_label = QLabel("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0")
        self.failed_messages_label = QLabel("–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: 0")
        self.last_message_label = QLabel("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: -")
        
        layout.addWidget(self.total_messages_label, 0, 0)
        layout.addWidget(self.successful_messages_label, 0, 1)
        layout.addWidget(self.failed_messages_label, 1, 0)
        layout.addWidget(self.last_message_label, 1, 1)
        
        parent_layout.addWidget(group)
    
    def _setup_connections(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.trade_notifications_cb.toggled.connect(
            lambda checked: self._update_setting('trade_notifications', checked)
        )
        self.error_notifications_cb.toggled.connect(
            lambda checked: self._update_setting('error_notifications', checked)
        )
        self.status_notifications_cb.toggled.connect(
            lambda checked: self._update_setting('status_notifications', checked)
        )
        self.balance_notifications_cb.toggled.connect(
            lambda checked: self._update_setting('balance_notifications', checked)
        )
        self.strategy_notifications_cb.toggled.connect(
            lambda checked: self._update_setting('strategy_notifications', checked)
        )
        
        # –¢–∏—Ö–∏–µ —á–∞—Å—ã
        self.quiet_hours_cb.toggled.connect(
            lambda checked: self._update_setting('quiet_hours_enabled', checked)
        )
        self.quiet_start_time.timeChanged.connect(self._update_quiet_start)
        self.quiet_end_time.timeChanged.connect(self._update_quiet_end)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.test_connection_btn.clicked.connect(self._test_connection)
        self.test_message_btn.clicked.connect(self._test_message)
        
        # –ò—Å—Ç–æ—Ä–∏—è
        self.clear_history_btn.clicked.connect(self._clear_history)
        self.refresh_history_btn.clicked.connect(self._refresh_history)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.bot_token_input.textChanged.connect(self._on_connection_config_changed)
        self.chat_id_input.textChanged.connect(self._on_connection_config_changed)
    
    def _load_settings(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            telegram_config = self.config.get_telegram_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for key, default_value in self.notification_settings.items():
                if key in telegram_config:
                    if key in ['quiet_start', 'quiet_end']:
                        # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        time_str = telegram_config[key]
                        if isinstance(time_str, str):
                            hour, minute = map(int, time_str.split(':'))
                            self.notification_settings[key] = time(hour, minute)
                    else:
                        self.notification_settings[key] = telegram_config[key]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ UI
            self._apply_settings_to_ui()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
    
    def _apply_settings_to_ui(self):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.trade_notifications_cb.setChecked(
            self.notification_settings['trade_notifications']
        )
        self.error_notifications_cb.setChecked(
            self.notification_settings['error_notifications']
        )
        self.status_notifications_cb.setChecked(
            self.notification_settings['status_notifications']
        )
        self.balance_notifications_cb.setChecked(
            self.notification_settings['balance_notifications']
        )
        self.strategy_notifications_cb.setChecked(
            self.notification_settings['strategy_notifications']
        )
        
        # –¢–∏—Ö–∏–µ —á–∞—Å—ã
        self.quiet_hours_cb.setChecked(
            self.notification_settings['quiet_hours_enabled']
        )
        
        quiet_start = self.notification_settings['quiet_start']
        quiet_end = self.notification_settings['quiet_end']
        
        self.quiet_start_time.setTime(
            QTime(quiet_start.hour, quiet_start.minute)
        )
        self.quiet_end_time.setTime(
            QTime(quiet_end.hour, quiet_end.minute)
        )
    
    def _update_setting(self, key: str, value: Any):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        Args:
            key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        try:
            self.notification_settings[key] = value
            self._save_settings()
            self.logger.debug(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
    
    def _update_quiet_start(self, qtime):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        """
        try:
            self.notification_settings['quiet_start'] = time(
                qtime.hour(), qtime.minute()
            )
            self._save_settings()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤: {e}")
    
    def _update_quiet_end(self, qtime):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        """
        try:
            self.notification_settings['quiet_end'] = time(
                qtime.hour(), qtime.minute()
            )
            self._save_settings()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤: {e}")
    
    def _save_settings(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            settings_to_save = self.notification_settings.copy()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–∏
            settings_to_save['quiet_start'] = self.notification_settings['quiet_start'].strftime('%H:%M')
            settings_to_save['quiet_end'] = self.notification_settings['quiet_end'].strftime('%H:%M')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config.update_telegram_config(settings_to_save)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
    
    def _toggle_token_visibility(self):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        """
        if self.show_token_btn.isChecked():
            self.bot_token_input.setEchoMode(QLineEdit.Normal)
            self.show_token_btn.setText("üôà")
        else:
            self.bot_token_input.setEchoMode(QLineEdit.Password)
            self.show_token_btn.setText("üëÅ")
    
    def _save_connection_config(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        try:
            bot_token = self.bot_token_input.text().strip()
            chat_id = self.chat_id_input.text().strip()
            
            if not bot_token:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
                return
            
            if not chat_id:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Chat ID")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            connection_config = {
                'bot_token': bot_token,
                'chat_id': chat_id
            }
            
            self.config.update_telegram_config(connection_config)
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            self._init_telegram_client()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self._update_connection_status()
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
    
    def _load_connection_config(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        try:
            telegram_config = self.config.get_telegram_config()
            
            bot_token = telegram_config.get('bot_token', '')
            chat_id = telegram_config.get('chat_id', '')
            
            self.bot_token_input.setText(bot_token)
            self.chat_id_input.setText(chat_id)
            
            self._update_connection_status()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def _on_connection_config_changed(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        self._update_connection_status()
    
    def _update_connection_status(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        try:
            bot_token = self.bot_token_input.text().strip()
            chat_id = self.chat_id_input.text().strip()
            
            if bot_token and chat_id and self.telegram_client:
                self.connection_status_label.setText("–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω")
                self.connection_status_label.setStyleSheet("color: green; font-weight: bold;")
            elif bot_token and chat_id:
                self.connection_status_label.setText("–°—Ç–∞—Ç—É—Å: –ù–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.connection_status_label.setStyleSheet("color: orange; font-weight: bold;")
            else:
                self.connection_status_label.setText("–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                self.connection_status_label.setStyleSheet("color: red; font-weight: bold;")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def _test_connection(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        """
        if not self.telegram_client:
            self.test_result_label.setText("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        if self.test_worker and self.test_worker.isRunning():
            return
        
        self.test_result_label.setText("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        self.test_connection_btn.setEnabled(False)
        
        self.test_worker = TelegramTestWorker(
            self.telegram_client, "connection", self
        )
        self.test_worker.test_completed.connect(self._on_test_completed)
        self.test_worker.start()
    
    def _test_message(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.telegram_client:
            self.test_result_label.setText("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        if self.test_worker and self.test_worker.isRunning():
            return
        
        self.test_result_label.setText("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        self.test_message_btn.setEnabled(False)
        
        self.test_worker = TelegramTestWorker(
            self.telegram_client, "message", self
        )
        self.test_worker.test_completed.connect(self._on_test_completed)
        self.test_worker.start()
    
    def _on_test_completed(self, success: bool, message: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        
        Args:
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        if success:
            self.test_result_label.setText(f"‚úÖ {message}")
        else:
            self.test_result_label.setText(f"‚ùå {message}")
        
        self.test_connection_btn.setEnabled(True)
        self.test_message_btn.setEnabled(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._add_message_to_history("–¢–µ—Å—Ç", message, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞")
    
    def _clear_history(self):
        """
        –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.message_history.clear()
        self.history_text.clear()
        self._update_statistics()
    
    def _refresh_history(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        """
        self._update_history_display()
        self._update_statistics()
    
    def _add_message_to_history(self, msg_type: str, message: str, status: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        
        Args:
            msg_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            status: –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        history_entry = {
            'timestamp': timestamp,
            'type': msg_type,
            'message': message,
            'status': status
        }
        
        self.message_history.append(history_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.message_history) > 100:
            self.message_history = self.message_history[-100:]
        
        self._update_history_display()
        self._update_statistics()
    
    def _update_history_display(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.history_text.clear()
        
        for entry in reversed(self.message_history[-20:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
            status_icon = "‚úÖ" if entry['status'] == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" else "‚ùå"
            
            text = f"[{entry['timestamp']}] {status_icon} {entry['type']}: {entry['message'][:100]}"
            if len(entry['message']) > 100:
                text += "..."
            
            self.history_text.append(text)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
        cursor = self.history_text.textCursor()
        cursor.movePosition(QTextCursor.Start)
        self.history_text.setTextCursor(cursor)
    
    def _update_statistics(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        total = len(self.message_history)
        successful = len([h for h in self.message_history if h['status'] == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"])
        failed = total - successful
        
        self.total_messages_label.setText(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}")
        self.successful_messages_label.setText(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}")
        self.failed_messages_label.setText(f"–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}")
        
        if self.message_history:
            last_message = self.message_history[-1]
            self.last_message_label.setText(
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message['timestamp']}"
            )
        else:
            self.last_message_label.setText("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: -")
    
    def _add_log(self, message: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
        """
        self.logger.info(f"[Telegram] {message}")
    
    def _is_quiet_hours(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        """
        if not self.notification_settings['quiet_hours_enabled']:
            return False
        
        current_time = datetime.now().time()
        quiet_start = self.notification_settings['quiet_start']
        quiet_end = self.notification_settings['quiet_end']
        
        if quiet_start <= quiet_end:
            # –¢–∏—Ö–∏–µ —á–∞—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
            return quiet_start <= current_time <= quiet_end
        else:
            # –¢–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            return current_time >= quiet_start or current_time <= quiet_end
    
    def send_notification(self, msg_type: str, message: str, add_buttons: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
        
        Args:
            msg_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (trade, error, status, balance, strategy)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            add_buttons: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            setting_key = f"{msg_type}_notifications"
            if setting_key in self.notification_settings:
                if not self.notification_settings[setting_key]:
                    self._add_log(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ {msg_type} –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if self._is_quiet_hours():
                self._add_log(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - —Ç–∏—Ö–∏–µ —á–∞—Å—ã")
                self._add_message_to_history(msg_type.capitalize(), message, "–¢–∏—Ö–∏–µ —á–∞—Å—ã")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.telegram_client:
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    try:
                        result = loop.run_until_complete(
                            self.telegram_client.send_notification(msg_type, message, add_buttons)
                        )
                        
                        if result['success']:
                            self._add_message_to_history(msg_type.capitalize(), message, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            self._add_log(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{msg_type}]: {message}")
                            return True
                        else:
                            self._add_message_to_history(msg_type.capitalize(), message, "–û—à–∏–±–∫–∞")
                            self._add_log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result['message']}")
                            return False
                    
                    finally:
                        loop.close()
                        
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    self._add_message_to_history(msg_type.capitalize(), message, "–û—à–∏–±–∫–∞")
                    return False
            else:
                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                self._add_message_to_history(msg_type.capitalize(), message, "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                self._add_log(f"Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ: [{msg_type}]: {message}")
                return False
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            self._add_message_to_history(msg_type.capitalize(), message, "–û—à–∏–±–∫–∞")
            return False
    
    def send_status_update(self, account_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_data: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.telegram_client:
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(
                    self.telegram_client.send_status_update(account_data)
                )
                
                if result['success']:
                    self._add_log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return True
                else:
                    self._add_log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {result['message']}")
                    return False
            
            finally:
                loop.close()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def update_database_reference(self, new_db_manager):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            new_db_manager: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
        """
        try:
            self.db = new_db_manager
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ command_processor –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.command_processor:
                self.command_processor.db_manager = new_db_manager
                
            self.logger.info("–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ TelegramTab")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ë–î –≤ TelegramTab: {e}")