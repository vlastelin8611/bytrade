#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP API Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.
"""

import logging
import asyncio
import aiohttp
import json
from typing import Dict, List, Any, Optional, Union
from datetime import datetime


class TelegramClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
    """
    
    def __init__(self, bot_token: str, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.logger = logging.getLogger(__name__)
        
        # –°–µ—Å—Å–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        self._session: Optional[aiohttp.ClientSession] = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏
        """
        if self._session is None or self._session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self._session = aiohttp.ClientSession(timeout=timeout)
        return self._session
    
    async def close(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏
        """
        if self._session and not self._session.closed:
            await self._session.close()
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
        """
        try:
            session = await self._get_session()
            url = f"{self.base_url}/getMe"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        bot_info = data.get('result', {})
                        return {
                            'success': True,
                            'message': f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: {bot_info.get('first_name', 'Unknown')}",
                            'bot_info': bot_info
                        }
                    else:
                        return {
                            'success': False,
                            'message': f"–û—à–∏–±–∫–∞ API: {data.get('description', 'Unknown error')}"
                        }
                else:
                    return {
                        'success': False,
                        'message': f"HTTP –æ—à–∏–±–∫–∞: {response.status}"
                    }
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            }
    
    async def send_message(
        self, 
        text: str, 
        parse_mode: str = "HTML",
        reply_markup: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            session = await self._get_session()
            url = f"{self.base_url}/sendMessage"
            
            payload = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            async with session.post(url, data=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        return {
                            'success': True,
                            'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                            'message_id': data.get('result', {}).get('message_id')
                        }
                    else:
                        return {
                            'success': False,
                            'message': f"–û—à–∏–±–∫–∞ API: {data.get('description', 'Unknown error')}"
                        }
                else:
                    return {
                        'success': False,
                        'message': f"HTTP –æ—à–∏–±–∫–∞: {response.status}"
                    }
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
            }
    
    def create_inline_keyboard(self, buttons: List[List[Dict[str, str]]]) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ - dict —Å 'text' –∏ 'callback_data'
            
        Returns:
            Dict —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        return {
            'inline_keyboard': buttons
        }
    
    async def send_notification(
        self, 
        notification_type: str, 
        message: str, 
        add_buttons: bool = True
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (trade, strategy, alert, error, etc.)
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            add_buttons: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        timestamp = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        emoji_map = {
            'trade': 'üí∞',
            'strategy': 'ü§ñ',
            'alert': '‚ö†Ô∏è',
            'error': '‚ùå',
            'balance': 'üí≥',
            'market': 'üìà',
            'system': '‚öôÔ∏è'
        }
        
        emoji = emoji_map.get(notification_type.lower(), 'üì¢')
        formatted_message = f"{emoji} <b>{notification_type.upper()}</b>\n\n{message}\n\n<i>üïê {timestamp}</i>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        reply_markup = None
        if add_buttons:
            buttons = [
                [
                    {'text': 'üìä –°—Ç–∞—Ç—É—Å', 'callback_data': 'status'},
                    {'text': '‚è∏Ô∏è –ü–∞—É–∑–∞', 'callback_data': 'pause'}
                ],
                [
                    {'text': 'üõë –°—Ç–æ–ø', 'callback_data': 'stop'},
                    {'text': 'üìã –õ–æ–≥–∏', 'callback_data': 'logs'}
                ]
            ]
            reply_markup = self.create_inline_keyboard(buttons)
        
        return await self.send_message(formatted_message, reply_markup=reply_markup)
    
    async def send_status_update(self, account_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_data: –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            balance = account_data.get('balance', {})
            equity = balance.get('equity', 'N/A')
            available = balance.get('available', 'N/A')
            mode = account_data.get('mode', 'Unknown')
            
            message = f"""üìä <b>–°–¢–ê–¢–£–° –ê–ö–ö–ê–£–ù–¢–ê</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>
‚Ä¢ Equity: {equity} USDT
‚Ä¢ Available: {available} USDT

‚öôÔ∏è <b>–†–µ–∂–∏–º:</b> {mode}

ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
{account_data.get('active_strategies', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π')}

üìà <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
{account_data.get('last_activity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"""
            
            return await self.send_notification('system', message, add_buttons=False)
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'success': False,
                'message': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            }
    
    def __del__(self):
        """
        –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        """
        if hasattr(self, '_session') and self._session and not self._session.closed:
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    loop.create_task(self._session.close())
                else:
                    loop.run_until_complete(self._session.close())
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏