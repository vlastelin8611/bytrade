#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from database.db_manager import DatabaseManager
import tempfile
import logging
from datetime import datetime

def test_database_logging():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
    print("=== –¢–ï–°–¢ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í –ë–ê–ó–£ –î–ê–ù–ù–´–• ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        temp_db_path = temp_db.name
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        db_manager = DatabaseManager(temp_db_path)
        db_manager.initialize_database()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("‚úì DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
        test_logs = [
            {
                'level': 'INFO',
                'logger_name': 'test_logger',
                'message': '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                'module': 'test_module',
                'function': 'test_function',
                'line_number': 42
            },
            {
                'level': 'ERROR',
                'logger_name': 'error_logger',
                'message': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞',
                'exception': 'TestException: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ'
            },
            {
                'level': 'WARNING',
                'logger_name': 'warning_logger',
                'message': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            }
        ]
        
        for log_data in test_logs:
            db_manager.log_entry(log_data)
        print(f"‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {len(test_logs)} –ª–æ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        test_trades = [
            {
                'order_id': 'TEST_001',
                'symbol': 'BTCUSDT',
                'side': 'Buy',
                'order_type': 'Market',
                'quantity': 0.001,
                'price': 50000.0,
                'executed_price': 50000.0,
                'executed_quantity': 0.001,
                'status': 'Filled',
                'strategy_name': 'test_strategy',
                'environment': 'testnet'
            },
            {
                'order_id': 'TEST_002',
                'symbol': 'ETHUSDT',
                'side': 'Sell',
                'order_type': 'Limit',
                'quantity': 0.01,
                'price': 3000.0,
                'status': 'New',
                'strategy_name': 'test_strategy',
                'environment': 'testnet'
            }
        ]
        
        for trade_data in test_trades:
            db_manager.log_trade(trade_data)
        print(f"‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {len(test_trades)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_actions = [
            {
                'strategy_name': 'adaptive_ml_strategy',
                'symbol': 'BTCUSDT',
                'action': 'signal_generated',
                'technical_details': 'RSI: 30, MACD: bullish_crossover',
                'human_readable': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É BTC',
                'data': {'rsi': 30, 'macd_signal': 'bullish'}
            },
            {
                'strategy_name': 'scalping_strategy',
                'symbol': 'ETHUSDT',
                'action': 'position_opened',
                'technical_details': 'Entry: 3000, SL: 2950, TP: 3050',
                'human_readable': '–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ ETH',
                'data': {'entry_price': 3000, 'stop_loss': 2950, 'take_profit': 3050}
            }
        ]
        
        for action_data in strategy_actions:
            db_manager.log_strategy_action(action_data)
        print(f"‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {len(strategy_actions)} –¥–µ–π—Å—Ç–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        db_manager.log_api_request(
            endpoint='/v5/position/list',
            method='GET',
            params={'category': 'linear'},
            response_code=200,
            success=True,
            response_time=150.5
        )
        print("‚úì –ó–∞–ø–∏—Å–∞–Ω –ª–æ–≥ API –∑–∞–ø—Ä–æ—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        with db_manager.get_session() as session:
            from database.db_manager import LogEntry, TradeEntry, StrategyLog, APIRequest
            
            log_count = session.query(LogEntry).count()
            trade_count = session.query(TradeEntry).count()
            strategy_count = session.query(StrategyLog).count()
            api_count = session.query(APIRequest).count()
            
            print(f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π: –ª–æ–≥–∏={log_count}, —Å–¥–µ–ª–∫–∏={trade_count}, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏={strategy_count}, API={api_count}")
            
            if log_count >= len(test_logs) and trade_count >= len(test_trades) and strategy_count >= len(strategy_actions) and api_count >= 1:
                print("‚úì –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            else:
                raise Exception("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        db_manager.close()
        print("\n=== –í–°–ï –¢–ï–°–¢–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í –ë–î –ü–†–û–ô–î–ï–ù–´ ===")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            os.unlink(temp_db_path)
        except:
            pass

def test_database_handler():
    """–¢–µ—Å—Ç DatabaseLogHandler –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å logging"""
    print("\n=== –¢–ï–°–¢ DATABASE LOG HANDLER ===")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_db:
        temp_db_path = temp_db.name
    
    try:
        from core.logger import DatabaseLogHandler
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        db_manager = DatabaseManager(temp_db_path)
        db_manager.initialize_database()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db_handler = DatabaseLogHandler(db_manager)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        test_logger = logging.getLogger('database_test_logger')
        test_logger.setLevel(logging.DEBUG)
        test_logger.addHandler(db_handler)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
        test_logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        test_logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        test_logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        print("‚úì –õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ DatabaseLogHandler")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        with db_manager.get_session() as session:
            from database.db_manager import LogEntry
            log_count = session.query(LogEntry).count()
            
            if log_count >= 3:
                print(f"‚úì DatabaseLogHandler —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –∑–∞–ø–∏—Å–∞–Ω–æ {log_count} –ª–æ–≥–æ–≤")
            else:
                raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: {log_count}")
        
        db_manager.close()
        print("\n=== –¢–ï–°–¢ DATABASE LOG HANDLER –ü–†–û–ô–î–ï–ù ===")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ DatabaseLogHandler: {e}")
        return False
    
    finally:
        try:
            os.unlink(temp_db_path)
        except:
            pass

if __name__ == "__main__":
    success1 = test_database_logging()
    success2 = test_database_handler()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í –ë–ê–ó–£ –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        sys.exit(1)